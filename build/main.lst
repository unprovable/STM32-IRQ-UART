ARM GAS  /tmp/cczj00CX.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB67:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** #include "stm32f1xx_hal.h"
   2:Src/main.c    **** #include "stm32f1xx_it.h"
   3:Src/main.c    **** #include "stm32f1xx_hal_gpio.h"
   4:Src/main.c    **** #include "stm32f1xx_hal_usart.h"
   5:Src/main.c    **** #include <string.h>
   6:Src/main.c    **** #include <stdio.h>
   7:Src/main.c    **** 
   8:Src/main.c    **** // Prrrrrototypes
   9:Src/main.c    **** void SystemClock_Config(void);
  10:Src/main.c    **** static void MX_GPIO_Init(void);
  11:Src/main.c    **** static void MX_USART1_UART_Init(void);
  12:Src/main.c    **** void toggleLED(void);
  13:Src/main.c    **** 
  14:Src/main.c    **** UART_HandleTypeDef UartHandle;      
  15:Src/main.c    **** __IO ITStatus UartReady = RESET;    
  16:Src/main.c    **** 
  17:Src/main.c    **** #define RXBUFFERSIZE    10
  18:Src/main.c    **** uint8_t aRxBuffer[RXBUFFERSIZE];    
  19:Src/main.c    **** 
  20:Src/main.c    **** char buffbuff[100];
  21:Src/main.c    **** int main(void)
  22:Src/main.c    **** {
  23:Src/main.c    ****     //Inits
  24:Src/main.c    ****     HAL_Init();
  25:Src/main.c    ****     SystemClock_Config();
  26:Src/main.c    ****     MX_GPIO_Init();
  27:Src/main.c    ****     MX_USART1_UART_Init();
  28:Src/main.c    ****     // this? well, why the f*ck not...
  29:Src/main.c    ****     HAL_UART_MspInit(&UartHandle);
  30:Src/main.c    ****     // error check the UART...
  31:Src/main.c    ****     if (HAL_UART_Receive_IT(&UartHandle, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK) {
  32:Src/main.c    ****         Error_Handler();
  33:Src/main.c    ****     }
  34:Src/main.c    ****     // tests... turn the LED off and send a string... THESE WORK!!
ARM GAS  /tmp/cczj00CX.s 			page 2


  35:Src/main.c    ****     toggleLED();
  36:Src/main.c    ****     sprintf(buffbuff, "This is me testing...\r\n>>>\r\n");
  37:Src/main.c    ****     HAL_UART_Transmit(&UartHandle, (uint8_t*)buffbuff, 90, 1000);
  38:Src/main.c    ****     while (1) { // main loop
  39:Src/main.c    ****         if (UartReady != SET) {
  40:Src/main.c    ****             /* do shit all...*/
  41:Src/main.c    ****         }
  42:Src/main.c    ****         else {
  43:Src/main.c    ****             /* UART 상태 리셋 */
  44:Src/main.c    ****             UartReady = RESET;
  45:Src/main.c    ****             sprintf(buffbuff, "Keypress!");
  46:Src/main.c    ****             HAL_UART_Transmit(&UartHandle, (uint8_t*)buffbuff, 90, 1000);
  47:Src/main.c    ****         }
  48:Src/main.c    ****     }
  49:Src/main.c    **** 
  50:Src/main.c    **** }
  51:Src/main.c    **** 
  52:Src/main.c    **** 
  53:Src/main.c    **** /**
  54:Src/main.c    ****   * @brief  Rx Transfer completed callback
  55:Src/main.c    ****   * @param  UartHandle: UART handle
  56:Src/main.c    ****   * @retval None
  57:Src/main.c    ****   */
  58:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
  59:Src/main.c    **** {
  60:Src/main.c    ****     if (UartHandle->Instance == USART1)	{
  61:Src/main.c    ****         UartReady = SET;
  62:Src/main.c    ****     }
  63:Src/main.c    **** }
  64:Src/main.c    **** 
  65:Src/main.c    **** // there's a line in main.h that links error_handler to this...
  66:Src/main.c    **** void _Error_Handler(char * file, int line)
  67:Src/main.c    **** {
  68:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
  69:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
  70:Src/main.c    ****   uint8_t *errBuf[100];
  71:Src/main.c    ****   sprintf(buffbuff, "[!] oops... something went wrong!");
  72:Src/main.c    ****       HAL_UART_Transmit(&UartHandle, (uint8_t*)errBuf, 35, 1000);
  73:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */ 
  74:Src/main.c    **** }
  75:Src/main.c    **** 
  76:Src/main.c    **** static void MX_GPIO_Init(void)
  77:Src/main.c    **** {
  25              		.loc 1 77 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 24
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 10B5     		push	{r4, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 4, -8
  33              		.cfi_offset 14, -4
  34 0002 86B0     		sub	sp, sp, #24
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 32
  37              	.LBB2:
  78:Src/main.c    **** 
ARM GAS  /tmp/cczj00CX.s 			page 3


  79:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
  80:Src/main.c    **** 
  81:Src/main.c    ****   /* GPIO Ports Clock Enable */
  82:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  38              		.loc 1 82 0
  39 0004 134B     		ldr	r3, .L3
  40 0006 9A69     		ldr	r2, [r3, #24]
  41 0008 42F01002 		orr	r2, r2, #16
  42 000c 9A61     		str	r2, [r3, #24]
  43 000e 9A69     		ldr	r2, [r3, #24]
  44 0010 02F01002 		and	r2, r2, #16
  45 0014 0092     		str	r2, [sp]
  46 0016 009A     		ldr	r2, [sp]
  47              	.LBE2:
  48              	.LBB3:
  83:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  49              		.loc 1 83 0
  50 0018 9A69     		ldr	r2, [r3, #24]
  51 001a 42F00402 		orr	r2, r2, #4
  52 001e 9A61     		str	r2, [r3, #24]
  53 0020 9B69     		ldr	r3, [r3, #24]
  54 0022 03F00403 		and	r3, r3, #4
  55 0026 0193     		str	r3, [sp, #4]
  56 0028 019B     		ldr	r3, [sp, #4]
  57              	.LBE3:
  84:Src/main.c    **** 
  85:Src/main.c    ****   /*Configure GPIO pin Output Level */
  86:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
  58              		.loc 1 86 0
  59 002a 0B4C     		ldr	r4, .L3+4
  60 002c 0022     		movs	r2, #0
  61 002e 4FF40051 		mov	r1, #8192
  62 0032 2046     		mov	r0, r4
  63 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
  64              	.LVL0:
  87:Src/main.c    **** 
  88:Src/main.c    ****   /*Configure GPIO pin : PC13 */
  89:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
  65              		.loc 1 89 0
  66 0038 4FF40053 		mov	r3, #8192
  67 003c 0293     		str	r3, [sp, #8]
  90:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  68              		.loc 1 90 0
  69 003e 0123     		movs	r3, #1
  70 0040 0393     		str	r3, [sp, #12]
  91:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  71              		.loc 1 91 0
  72 0042 0223     		movs	r3, #2
  73 0044 0593     		str	r3, [sp, #20]
  92:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  74              		.loc 1 92 0
  75 0046 02A9     		add	r1, sp, #8
  76 0048 2046     		mov	r0, r4
  77 004a FFF7FEFF 		bl	HAL_GPIO_Init
  78              	.LVL1:
  93:Src/main.c    **** 
  94:Src/main.c    **** }
ARM GAS  /tmp/cczj00CX.s 			page 4


  79              		.loc 1 94 0
  80 004e 06B0     		add	sp, sp, #24
  81              	.LCFI2:
  82              		.cfi_def_cfa_offset 8
  83              		@ sp needed
  84 0050 10BD     		pop	{r4, pc}
  85              	.L4:
  86 0052 00BF     		.align	2
  87              	.L3:
  88 0054 00100240 		.word	1073876992
  89 0058 00100140 		.word	1073811456
  90              		.cfi_endproc
  91              	.LFE67:
  93              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
  94              		.align	1
  95              		.global	HAL_UART_RxCpltCallback
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
  99              		.fpu softvfp
 101              	HAL_UART_RxCpltCallback:
 102              	.LFB65:
  59:Src/main.c    ****     if (UartHandle->Instance == USART1)	{
 103              		.loc 1 59 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              		@ link register save eliminated.
 108              	.LVL2:
  60:Src/main.c    ****         UartReady = SET;
 109              		.loc 1 60 0
 110 0000 0268     		ldr	r2, [r0]
 111 0002 044B     		ldr	r3, .L8
 112 0004 9A42     		cmp	r2, r3
 113 0006 00D0     		beq	.L7
 114              	.L5:
 115 0008 7047     		bx	lr
 116              	.L7:
  61:Src/main.c    ****     }
 117              		.loc 1 61 0
 118 000a 0122     		movs	r2, #1
 119 000c 024B     		ldr	r3, .L8+4
 120 000e 1A70     		strb	r2, [r3]
  63:Src/main.c    **** 
 121              		.loc 1 63 0
 122 0010 FAE7     		b	.L5
 123              	.L9:
 124 0012 00BF     		.align	2
 125              	.L8:
 126 0014 00380140 		.word	1073821696
 127 0018 00000000 		.word	.LANCHOR0
 128              		.cfi_endproc
 129              	.LFE65:
 131              		.section	.text._Error_Handler,"ax",%progbits
 132              		.align	1
 133              		.global	_Error_Handler
 134              		.syntax unified
ARM GAS  /tmp/cczj00CX.s 			page 5


 135              		.thumb
 136              		.thumb_func
 137              		.fpu softvfp
 139              	_Error_Handler:
 140              	.LFB66:
  67:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 141              		.loc 1 67 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 400
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              	.LVL3:
 146 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 147              	.LCFI3:
 148              		.cfi_def_cfa_offset 20
 149              		.cfi_offset 4, -20
 150              		.cfi_offset 5, -16
 151              		.cfi_offset 6, -12
 152              		.cfi_offset 7, -8
 153              		.cfi_offset 14, -4
 154 0002 E5B0     		sub	sp, sp, #404
 155              	.LCFI4:
 156              		.cfi_def_cfa_offset 424
  71:Src/main.c    ****       HAL_UART_Transmit(&UartHandle, (uint8_t*)errBuf, 35, 1000);
 157              		.loc 1 71 0
 158 0004 0C4E     		ldr	r6, .L13
 159 0006 0D4C     		ldr	r4, .L13+4
 160 0008 06F12007 		add	r7, r6, #32
 161              	.LVL4:
 162              	.L11:
 163 000c 3546     		mov	r5, r6
 164 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 165 0010 2060     		str	r0, [r4]	@ unaligned
 166 0012 6160     		str	r1, [r4, #4]	@ unaligned
 167 0014 A260     		str	r2, [r4, #8]	@ unaligned
 168 0016 E360     		str	r3, [r4, #12]	@ unaligned
 169 0018 2E46     		mov	r6, r5
 170 001a 1034     		adds	r4, r4, #16
 171 001c BD42     		cmp	r5, r7
 172 001e F5D1     		bne	.L11
 173 0020 2B88     		ldrh	r3, [r5]	@ unaligned
 174 0022 2380     		strh	r3, [r4]	@ unaligned
  72:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */ 
 175              		.loc 1 72 0
 176 0024 4FF47A73 		mov	r3, #1000
 177 0028 2322     		movs	r2, #35
 178 002a 6946     		mov	r1, sp
 179 002c 0448     		ldr	r0, .L13+8
 180 002e FFF7FEFF 		bl	HAL_UART_Transmit
 181              	.LVL5:
  74:Src/main.c    **** 
 182              		.loc 1 74 0
 183 0032 65B0     		add	sp, sp, #404
 184              	.LCFI5:
 185              		.cfi_def_cfa_offset 20
 186              		@ sp needed
 187 0034 F0BD     		pop	{r4, r5, r6, r7, pc}
 188              	.L14:
ARM GAS  /tmp/cczj00CX.s 			page 6


 189 0036 00BF     		.align	2
 190              	.L13:
 191 0038 00000000 		.word	.LC0
 192 003c 00000000 		.word	buffbuff
 193 0040 00000000 		.word	UartHandle
 194              		.cfi_endproc
 195              	.LFE66:
 197              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 198              		.align	1
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu softvfp
 204              	MX_USART1_UART_Init:
 205              	.LFB69:
  95:Src/main.c    **** 
  96:Src/main.c    **** void SystemClock_Config(void)
  97:Src/main.c    **** {
  98:Src/main.c    **** 
  99:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 100:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 101:Src/main.c    **** 
 102:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 103:Src/main.c    ****     */
 104:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 105:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 106:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 107:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 108:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 109:Src/main.c    ****   {
 110:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 111:Src/main.c    ****   }
 112:Src/main.c    **** 
 113:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 114:Src/main.c    ****     */
 115:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 116:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 117:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 118:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 119:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 120:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 121:Src/main.c    **** 
 122:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 123:Src/main.c    ****   {
 124:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 125:Src/main.c    ****   }
 126:Src/main.c    **** 
 127:Src/main.c    ****     /**Configure the Systick interrupt time 
 128:Src/main.c    ****     */
 129:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 130:Src/main.c    **** 
 131:Src/main.c    ****     /**Configure the Systick 
 132:Src/main.c    ****     */
 133:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 134:Src/main.c    **** 
 135:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 136:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
ARM GAS  /tmp/cczj00CX.s 			page 7


 137:Src/main.c    **** }
 138:Src/main.c    **** 
 139:Src/main.c    **** static void MX_USART1_UART_Init(void)
 140:Src/main.c    **** {
 206              		.loc 1 140 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210 0000 08B5     		push	{r3, lr}
 211              	.LCFI6:
 212              		.cfi_def_cfa_offset 8
 213              		.cfi_offset 3, -8
 214              		.cfi_offset 14, -4
 141:Src/main.c    **** 
 142:Src/main.c    ****   UartHandle.Instance = USART1;
 215              		.loc 1 142 0
 216 0002 0B48     		ldr	r0, .L19
 217 0004 0B4B     		ldr	r3, .L19+4
 218 0006 0360     		str	r3, [r0]
 143:Src/main.c    ****   UartHandle.Init.BaudRate = 115200;
 219              		.loc 1 143 0
 220 0008 4FF4E133 		mov	r3, #115200
 221 000c 4360     		str	r3, [r0, #4]
 144:Src/main.c    ****   UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 222              		.loc 1 144 0
 223 000e 0023     		movs	r3, #0
 224 0010 8360     		str	r3, [r0, #8]
 145:Src/main.c    ****   UartHandle.Init.StopBits = UART_STOPBITS_1;
 225              		.loc 1 145 0
 226 0012 C360     		str	r3, [r0, #12]
 146:Src/main.c    ****   UartHandle.Init.Parity = UART_PARITY_NONE;
 227              		.loc 1 146 0
 228 0014 0361     		str	r3, [r0, #16]
 147:Src/main.c    ****   UartHandle.Init.Mode = UART_MODE_TX_RX;
 229              		.loc 1 147 0
 230 0016 0C22     		movs	r2, #12
 231 0018 4261     		str	r2, [r0, #20]
 148:Src/main.c    ****   UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 232              		.loc 1 148 0
 233 001a 8361     		str	r3, [r0, #24]
 149:Src/main.c    ****   UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 234              		.loc 1 149 0
 235 001c C361     		str	r3, [r0, #28]
 150:Src/main.c    ****   if (HAL_UART_Init(&UartHandle) != HAL_OK)
 236              		.loc 1 150 0
 237 001e FFF7FEFF 		bl	HAL_UART_Init
 238              	.LVL6:
 239 0022 00B9     		cbnz	r0, .L18
 240              	.L15:
 241 0024 08BD     		pop	{r3, pc}
 242              	.L18:
 151:Src/main.c    ****   {
 152:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 243              		.loc 1 152 0
 244 0026 9821     		movs	r1, #152
 245 0028 0348     		ldr	r0, .L19+8
 246 002a FFF7FEFF 		bl	_Error_Handler
ARM GAS  /tmp/cczj00CX.s 			page 8


 247              	.LVL7:
 153:Src/main.c    ****   }
 154:Src/main.c    **** 
 155:Src/main.c    **** }
 248              		.loc 1 155 0
 249 002e F9E7     		b	.L15
 250              	.L20:
 251              		.align	2
 252              	.L19:
 253 0030 00000000 		.word	UartHandle
 254 0034 00380140 		.word	1073821696
 255 0038 00000000 		.word	.LC1
 256              		.cfi_endproc
 257              	.LFE69:
 259              		.section	.text.SystemClock_Config,"ax",%progbits
 260              		.align	1
 261              		.global	SystemClock_Config
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 265              		.fpu softvfp
 267              	SystemClock_Config:
 268              	.LFB68:
  97:Src/main.c    **** 
 269              		.loc 1 97 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 64
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273 0000 00B5     		push	{lr}
 274              	.LCFI7:
 275              		.cfi_def_cfa_offset 4
 276              		.cfi_offset 14, -4
 277 0002 91B0     		sub	sp, sp, #68
 278              	.LCFI8:
 279              		.cfi_def_cfa_offset 72
 104:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 280              		.loc 1 104 0
 281 0004 0223     		movs	r3, #2
 282 0006 0693     		str	r3, [sp, #24]
 105:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 283              		.loc 1 105 0
 284 0008 0123     		movs	r3, #1
 285 000a 0A93     		str	r3, [sp, #40]
 106:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 286              		.loc 1 106 0
 287 000c 1023     		movs	r3, #16
 288 000e 0B93     		str	r3, [sp, #44]
 107:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 289              		.loc 1 107 0
 290 0010 0023     		movs	r3, #0
 291 0012 0D93     		str	r3, [sp, #52]
 108:Src/main.c    ****   {
 292              		.loc 1 108 0
 293 0014 06A8     		add	r0, sp, #24
 294 0016 FFF7FEFF 		bl	HAL_RCC_OscConfig
 295              	.LVL8:
 296 001a F0B9     		cbnz	r0, .L25
ARM GAS  /tmp/cczj00CX.s 			page 9


 297              	.L22:
 115:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 298              		.loc 1 115 0
 299 001c 0F23     		movs	r3, #15
 300 001e 0193     		str	r3, [sp, #4]
 117:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 301              		.loc 1 117 0
 302 0020 0021     		movs	r1, #0
 303 0022 0291     		str	r1, [sp, #8]
 118:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 304              		.loc 1 118 0
 305 0024 0391     		str	r1, [sp, #12]
 119:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 306              		.loc 1 119 0
 307 0026 0491     		str	r1, [sp, #16]
 120:Src/main.c    **** 
 308              		.loc 1 120 0
 309 0028 0591     		str	r1, [sp, #20]
 122:Src/main.c    ****   {
 310              		.loc 1 122 0
 311 002a 01A8     		add	r0, sp, #4
 312 002c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 313              	.LVL9:
 314 0030 C0B9     		cbnz	r0, .L26
 315              	.L23:
 129:Src/main.c    **** 
 316              		.loc 1 129 0
 317 0032 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 318              	.LVL10:
 319 0036 0E4B     		ldr	r3, .L27
 320 0038 A3FB0030 		umull	r3, r0, r3, r0
 321 003c 8009     		lsrs	r0, r0, #6
 322 003e FFF7FEFF 		bl	HAL_SYSTICK_Config
 323              	.LVL11:
 133:Src/main.c    **** 
 324              		.loc 1 133 0
 325 0042 0420     		movs	r0, #4
 326 0044 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 327              	.LVL12:
 136:Src/main.c    **** }
 328              		.loc 1 136 0
 329 0048 0022     		movs	r2, #0
 330 004a 1146     		mov	r1, r2
 331 004c 4FF0FF30 		mov	r0, #-1
 332 0050 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 333              	.LVL13:
 137:Src/main.c    **** 
 334              		.loc 1 137 0
 335 0054 11B0     		add	sp, sp, #68
 336              	.LCFI9:
 337              		.cfi_remember_state
 338              		.cfi_def_cfa_offset 4
 339              		@ sp needed
 340 0056 5DF804FB 		ldr	pc, [sp], #4
 341              	.L25:
 342              	.LCFI10:
 343              		.cfi_restore_state
ARM GAS  /tmp/cczj00CX.s 			page 10


 110:Src/main.c    ****   }
 344              		.loc 1 110 0
 345 005a 6E21     		movs	r1, #110
 346 005c 0548     		ldr	r0, .L27+4
 347 005e FFF7FEFF 		bl	_Error_Handler
 348              	.LVL14:
 349 0062 DBE7     		b	.L22
 350              	.L26:
 124:Src/main.c    ****   }
 351              		.loc 1 124 0
 352 0064 7C21     		movs	r1, #124
 353 0066 0348     		ldr	r0, .L27+4
 354 0068 FFF7FEFF 		bl	_Error_Handler
 355              	.LVL15:
 356 006c E1E7     		b	.L23
 357              	.L28:
 358 006e 00BF     		.align	2
 359              	.L27:
 360 0070 D34D6210 		.word	274877907
 361 0074 00000000 		.word	.LC1
 362              		.cfi_endproc
 363              	.LFE68:
 365              		.section	.text.toggleLED,"ax",%progbits
 366              		.align	1
 367              		.global	toggleLED
 368              		.syntax unified
 369              		.thumb
 370              		.thumb_func
 371              		.fpu softvfp
 373              	toggleLED:
 374              	.LFB70:
 156:Src/main.c    **** 
 157:Src/main.c    **** // for when we get to using it...
 158:Src/main.c    **** void toggleLED()
 159:Src/main.c    **** {
 375              		.loc 1 159 0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 0
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 379 0000 08B5     		push	{r3, lr}
 380              	.LCFI11:
 381              		.cfi_def_cfa_offset 8
 382              		.cfi_offset 3, -8
 383              		.cfi_offset 14, -4
 160:Src/main.c    ****     // this is basically just doing 
 161:Src/main.c    ****     // GPIOC->ODR ^= GPIO_PIN_13;
 162:Src/main.c    ****     // but who cares... HAL made it... bastards...
 163:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 384              		.loc 1 163 0
 385 0002 4FF40051 		mov	r1, #8192
 386 0006 0248     		ldr	r0, .L31
 387 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 388              	.LVL16:
 389 000c 08BD     		pop	{r3, pc}
 390              	.L32:
 391 000e 00BF     		.align	2
 392              	.L31:
ARM GAS  /tmp/cczj00CX.s 			page 11


 393 0010 00100140 		.word	1073811456
 394              		.cfi_endproc
 395              	.LFE70:
 397              		.section	.text.main,"ax",%progbits
 398              		.align	1
 399              		.global	main
 400              		.syntax unified
 401              		.thumb
 402              		.thumb_func
 403              		.fpu softvfp
 405              	main:
 406              	.LFB64:
  22:Src/main.c    ****     //Inits
 407              		.loc 1 22 0
 408              		.cfi_startproc
 409              		@ Volatile: function does not return.
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412 0000 08B5     		push	{r3, lr}
 413              	.LCFI12:
 414              		.cfi_def_cfa_offset 8
 415              		.cfi_offset 3, -8
 416              		.cfi_offset 14, -4
  24:Src/main.c    ****     SystemClock_Config();
 417              		.loc 1 24 0
 418 0002 FFF7FEFF 		bl	HAL_Init
 419              	.LVL17:
  25:Src/main.c    ****     MX_GPIO_Init();
 420              		.loc 1 25 0
 421 0006 FFF7FEFF 		bl	SystemClock_Config
 422              	.LVL18:
  26:Src/main.c    ****     MX_USART1_UART_Init();
 423              		.loc 1 26 0
 424 000a FFF7FEFF 		bl	MX_GPIO_Init
 425              	.LVL19:
  27:Src/main.c    ****     // this? well, why the f*ck not...
 426              		.loc 1 27 0
 427 000e FFF7FEFF 		bl	MX_USART1_UART_Init
 428              	.LVL20:
  29:Src/main.c    ****     // error check the UART...
 429              		.loc 1 29 0
 430 0012 1D4C     		ldr	r4, .L38
 431 0014 2046     		mov	r0, r4
 432 0016 FFF7FEFF 		bl	HAL_UART_MspInit
 433              	.LVL21:
  31:Src/main.c    ****         Error_Handler();
 434              		.loc 1 31 0
 435 001a 0A22     		movs	r2, #10
 436 001c 1B49     		ldr	r1, .L38+4
 437 001e 2046     		mov	r0, r4
 438 0020 FFF7FEFF 		bl	HAL_UART_Receive_IT
 439              	.LVL22:
 440 0024 18B1     		cbz	r0, .L34
  32:Src/main.c    ****     }
 441              		.loc 1 32 0
 442 0026 2021     		movs	r1, #32
 443 0028 1948     		ldr	r0, .L38+8
ARM GAS  /tmp/cczj00CX.s 			page 12


 444 002a FFF7FEFF 		bl	_Error_Handler
 445              	.LVL23:
 446              	.L34:
  35:Src/main.c    ****     sprintf(buffbuff, "This is me testing...\r\n>>>\r\n");
 447              		.loc 1 35 0
 448 002e FFF7FEFF 		bl	toggleLED
 449              	.LVL24:
  36:Src/main.c    ****     HAL_UART_Transmit(&UartHandle, (uint8_t*)buffbuff, 90, 1000);
 450              		.loc 1 36 0
 451 0032 184D     		ldr	r5, .L38+12
 452 0034 184C     		ldr	r4, .L38+16
 453 0036 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 454 0038 2860     		str	r0, [r5]	@ unaligned
 455 003a 6960     		str	r1, [r5, #4]	@ unaligned
 456 003c AA60     		str	r2, [r5, #8]	@ unaligned
 457 003e EB60     		str	r3, [r5, #12]	@ unaligned
 458 0040 07CC     		ldmia	r4!, {r0, r1, r2}
 459 0042 2861     		str	r0, [r5, #16]	@ unaligned
 460 0044 6961     		str	r1, [r5, #20]	@ unaligned
 461 0046 AA61     		str	r2, [r5, #24]	@ unaligned
 462 0048 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 463 004a 2B77     		strb	r3, [r5, #28]
  37:Src/main.c    ****     while (1) { // main loop
 464              		.loc 1 37 0
 465 004c 4FF47A73 		mov	r3, #1000
 466 0050 5A22     		movs	r2, #90
 467 0052 2946     		mov	r1, r5
 468 0054 0C48     		ldr	r0, .L38
 469 0056 FFF7FEFF 		bl	HAL_UART_Transmit
 470              	.LVL25:
 471              	.L35:
  39:Src/main.c    ****             /* do shit all...*/
 472              		.loc 1 39 0
 473 005a 104B     		ldr	r3, .L38+20
 474 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 475 005e DBB2     		uxtb	r3, r3
 476 0060 012B     		cmp	r3, #1
 477 0062 FAD1     		bne	.L35
  44:Src/main.c    ****             sprintf(buffbuff, "Keypress!");
 478              		.loc 1 44 0
 479 0064 0022     		movs	r2, #0
 480 0066 0D4B     		ldr	r3, .L38+20
 481 0068 1A70     		strb	r2, [r3]
  45:Src/main.c    ****             HAL_UART_Transmit(&UartHandle, (uint8_t*)buffbuff, 90, 1000);
 482              		.loc 1 45 0
 483 006a 0A4C     		ldr	r4, .L38+12
 484 006c 0C4B     		ldr	r3, .L38+24
 485 006e 03CB     		ldmia	r3!, {r0, r1}
 486 0070 2060     		str	r0, [r4]	@ unaligned
 487 0072 6160     		str	r1, [r4, #4]	@ unaligned
 488 0074 1B88     		ldrh	r3, [r3]	@ unaligned
 489 0076 2381     		strh	r3, [r4, #8]	@ unaligned
  46:Src/main.c    ****         }
 490              		.loc 1 46 0
 491 0078 4FF47A73 		mov	r3, #1000
 492 007c 5A22     		movs	r2, #90
 493 007e 2146     		mov	r1, r4
ARM GAS  /tmp/cczj00CX.s 			page 13


 494 0080 0148     		ldr	r0, .L38
 495 0082 FFF7FEFF 		bl	HAL_UART_Transmit
 496              	.LVL26:
 497 0086 E8E7     		b	.L35
 498              	.L39:
 499              		.align	2
 500              	.L38:
 501 0088 00000000 		.word	UartHandle
 502 008c 00000000 		.word	aRxBuffer
 503 0090 00000000 		.word	.LC1
 504 0094 00000000 		.word	buffbuff
 505 0098 00000000 		.word	.LC2
 506 009c 00000000 		.word	.LANCHOR0
 507 00a0 20000000 		.word	.LC3
 508              		.cfi_endproc
 509              	.LFE64:
 511              		.comm	buffbuff,100,4
 512              		.comm	aRxBuffer,10,4
 513              		.global	UartReady
 514              		.comm	UartHandle,64,4
 515              		.section	.bss.UartReady,"aw",%nobits
 516              		.set	.LANCHOR0,. + 0
 519              	UartReady:
 520 0000 00       		.space	1
 521              		.section	.rodata.MX_USART1_UART_Init.str1.4,"aMS",%progbits,1
 522              		.align	2
 523              	.LC1:
 524 0000 5372632F 		.ascii	"Src/main.c\000"
 524      6D61696E 
 524      2E6300
 525              		.section	.rodata._Error_Handler.str1.4,"aMS",%progbits,1
 526              		.align	2
 527              	.LC0:
 528 0000 5B215D20 		.ascii	"[!] oops... something went wrong!\000"
 528      6F6F7073 
 528      2E2E2E20 
 528      736F6D65 
 528      7468696E 
 529              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 530              		.align	2
 531              	.LC2:
 532 0000 54686973 		.ascii	"This is me testing...\015\012>>>\015\012\000"
 532      20697320 
 532      6D652074 
 532      65737469 
 532      6E672E2E 
 533 001d 000000   		.space	3
 534              	.LC3:
 535 0020 4B657970 		.ascii	"Keypress!\000"
 535      72657373 
 535      2100
 536              		.text
 537              	.Letext0:
 538              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 539              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 540              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 541              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
ARM GAS  /tmp/cczj00CX.s 			page 14


 542              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 543              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 544              		.file 8 "/usr/arm-none-eabi/include/sys/lock.h"
 545              		.file 9 "/usr/arm-none-eabi/include/sys/_types.h"
 546              		.file 10 "/usr/lib/gcc/arm-none-eabi/6.2.0/include/stddef.h"
 547              		.file 11 "/usr/arm-none-eabi/include/sys/reent.h"
 548              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 549              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 550              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 551              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 552              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 553              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 554              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 555              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/cczj00CX.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cczj00CX.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cczj00CX.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cczj00CX.s:88     .text.MX_GPIO_Init:0000000000000054 $d
     /tmp/cczj00CX.s:94     .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cczj00CX.s:101    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cczj00CX.s:126    .text.HAL_UART_RxCpltCallback:0000000000000014 $d
     /tmp/cczj00CX.s:132    .text._Error_Handler:0000000000000000 $t
     /tmp/cczj00CX.s:139    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/cczj00CX.s:191    .text._Error_Handler:0000000000000038 $d
                            *COM*:0000000000000064 buffbuff
                            *COM*:0000000000000040 UartHandle
     /tmp/cczj00CX.s:198    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cczj00CX.s:204    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cczj00CX.s:253    .text.MX_USART1_UART_Init:0000000000000030 $d
     /tmp/cczj00CX.s:260    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cczj00CX.s:267    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cczj00CX.s:360    .text.SystemClock_Config:0000000000000070 $d
     /tmp/cczj00CX.s:366    .text.toggleLED:0000000000000000 $t
     /tmp/cczj00CX.s:373    .text.toggleLED:0000000000000000 toggleLED
     /tmp/cczj00CX.s:393    .text.toggleLED:0000000000000010 $d
     /tmp/cczj00CX.s:398    .text.main:0000000000000000 $t
     /tmp/cczj00CX.s:405    .text.main:0000000000000000 main
     /tmp/cczj00CX.s:501    .text.main:0000000000000088 $d
                            *COM*:000000000000000a aRxBuffer
     /tmp/cczj00CX.s:519    .bss.UartReady:0000000000000000 UartReady
     /tmp/cczj00CX.s:520    .bss.UartReady:0000000000000000 $d
     /tmp/cczj00CX.s:522    .rodata.MX_USART1_UART_Init.str1.4:0000000000000000 $d
     /tmp/cczj00CX.s:526    .rodata._Error_Handler.str1.4:0000000000000000 $d
     /tmp/cczj00CX.s:530    .rodata.main.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Transmit
HAL_UART_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_GPIO_TogglePin
HAL_Init
HAL_UART_MspInit
HAL_UART_Receive_IT
